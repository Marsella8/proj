global !p
import os
from pathlib import Path
# import importlib
import sys
sys.path.append('%PROJPATH%')
import proj.config_file as h
# importlib.reload(h)
endglobal

snippet ifndef "ifndef" bA
#ifndef `!p snip.rv = h.gen_ifndef_uid(path)`
#define `!p snip.rv = h.gen_ifndef_uid(path)`
endsnippet

snippet hdr "header gen" bA
#ifndef `!p snip.rv = h.gen_ifndef_uid(path)`
#define `!p snip.rv = h.gen_ifndef_uid(path)`

namespace `!p snip.rv = h.get_config(path).namespace_name` {

$0

} // namespace `!p snip.rv = h.get_config(path).namespace_name`

#endif
endsnippet

snippet ns "namespace" bA
namespace `!p snip.rv = h.get_config(path).namespace_name` {

$0

} // namespace `!p snip.rv = h.get_config(path).namespace_name`
endsnippet


snippet src "src gen" bA
#include "`!p snip.rv = h.get_include_path(path)`"
endsnippet

snippet test "test gen" bA
#include "`!p snip.rv = h.get_test_header_path(path)`"
#include "`!p snip.rv = h.get_include_path(path)`"

TEST_SUITE(`!p snip.rv = h.get_config(path).testsuite_macro`) {
	TEST_CASE("${1}") {
    CHECK_MESSAGE(false, "TODO: $1");
	}
}
endsnippet

snippet gen_v "generate _v" bA
template <typename T>
inline constexpr bool ${1}_v = $1<T>::value;
endsnippet

snippet gen_t "generate _v" bA
template <typename T>
using ${1}_t = typename $1<T>::type;
endsnippet

snippet tn "typename" wA
typename 
endsnippet
